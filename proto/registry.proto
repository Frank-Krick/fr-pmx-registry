syntax = "proto3";
import "proto/input.proto";
import "proto/output.proto";
import "proto/looper.proto";
import "proto/plugin.proto";
import "proto/channel_strip.proto";
import "proto/output_stage.proto";

package pmx;

message EmptyRequest {}

message ByIdRequest {
  uint32 id = 1;
}

message ListInputsReply {
  repeated pmx.input.PmxInput inputs = 1;
}

message UpdateInputNameRequest {
  uint32 id = 1;
  string name = 2;
}

message UpdateInputPortAssignmentsRequest {
  uint32 id = 1;
  pmx.input.PmxInputType input_type = 3;
  optional string left_port_path = 4;
  optional string right_port_path = 5;
}

message ListOutputsReply {
  repeated pmx.output.PmxOutput outputs = 1;
}

message AddOutputRequest {
  string name = 2;
  pmx.output.PmxOutputType output_type = 1;
}

message UpdateOutputNameRequest {
  uint32 id = 1;
  string name = 2;
}

message UpdateOutputPortAssignmentsRequest {
  uint32 id = 1;
  optional string left_port_path = 2;
  optional string right_port_path = 3;
}

message RegisterPluginRequest {
  pmx.plugin.PmxPlugin plugin = 1;
}

message ListPluginsReply {
  repeated pmx.plugin.PmxPlugin plugins = 1;
}

message RegisterChannelStripRequest {
  pmx.channel_strip.PmxChannelStrip channel_strip = 1;
}

message ListChannelStripsReply {
  repeated pmx.channel_strip.PmxChannelStrip channel_strips = 1;
}

message RegisterLooperRequest {
  uint32 loop_number = 1;
}

message ListLoopersReply {
  repeated pmx.looper.PmxLooper loopers = 1;
};

message RegisterOutputStageRequest {
  string name = 2;
  uint32 left_channel_strip_id = 3;
  uint32 right_channel_strip_id = 4;
  uint32 cross_fader_plugin_id = 5;
}

message ListOutputStagesReply {
  repeated pmx.output_stage.PmxOutputStage output_stages = 1;
}

service PmxRegistry {
  rpc ListLoopers(EmptyRequest) returns (ListLoopersReply);
  rpc ListInputs(EmptyRequest) returns (ListInputsReply);
  rpc ListOutputs(EmptyRequest) returns (ListOutputsReply);
  rpc ListOutputStages(EmptyRequest) returns (ListOutputStagesReply);
  rpc GetInput(ByIdRequest) returns (pmx.input.PmxInput);
  rpc UpdateInputName(UpdateInputNameRequest) returns (pmx.input.PmxInput);
  rpc UpdateInputPortAssignments(UpdateInputPortAssignmentsRequest) returns (pmx.input.PmxInput);
  rpc UpdateOutputPortAssignments(UpdateOutputPortAssignmentsRequest) returns (pmx.output.PmxOutput);
  rpc ListPlugins(EmptyRequest) returns (ListPluginsReply);
  rpc ListChannelStrips(EmptyRequest) returns (ListChannelStripsReply);
  rpc RegisterPlugin(RegisterPluginRequest) returns (pmx.plugin.PmxPlugin);
  rpc RegisterChannelStrip(RegisterChannelStripRequest) returns (pmx.channel_strip.PmxChannelStrip);
  rpc RegisterLooper(RegisterLooperRequest) returns (pmx.looper.PmxLooper);
  rpc RegisterOutputStage(RegisterOutputStageRequest) returns (pmx.output_stage.PmxOutputStage);
}
